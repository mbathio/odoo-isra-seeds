# stubs/odoo.pyi
from typing import Any, Dict, List, Optional, Union, Type
from datetime import datetime, date

class Environment:
    user: Any
    def __getitem__(self, model_name: str) -> Any: ...
    def ref(self, xml_id: str) -> Any: ...

class BaseModel:
    env: Environment
    id: int
    ids: List[int]
    
    def create(self, vals: Dict[str, Any]) -> 'BaseModel': ...
    def write(self, vals: Dict[str, Any]) -> bool: ...
    def unlink(self) -> bool: ...
    def search(self, domain: List, **kwargs) -> 'BaseModel': ...
    def browse(self, ids: Union[int, List[int]]) -> 'BaseModel': ...
    def exists(self) -> bool: ...
    def mapped(self, field_name: str) -> List[Any]: ...
    def filtered(self, func) -> 'BaseModel': ...
    def sorted(self, key=None, reverse=False) -> 'BaseModel': ...

class models:
    class Model(BaseModel): ...
    class TransientModel(BaseModel): ...

class fields:
    @staticmethod
    def Char(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Text(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Integer(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Float(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Boolean(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Date(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Datetime(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Selection(selection: List, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Many2one(comodel_name: str, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def One2many(comodel_name: str, inverse_name: str, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Many2many(comodel_name: str, string: str = None, **kwargs) -> Any: ...

class api:
    @staticmethod
    def depends(*args) -> Any: ...
    @staticmethod
    def model(func) -> Any: ...
    @staticmethod
    def constrains(*args) -> Any: ...