# odoo-stubs.py - Stub file pour l'IDE
"""
Stub file pour éviter les erreurs d'import Odoo dans l'IDE
À placer dans le dossier racine ou dans un dossier typings/
"""

from typing import Any, Dict, List, Optional, Union
from datetime import datetime, date

class models:
    class Model:
        def __init__(self, *args, **kwargs): ...
        def create(self, vals: Dict[str, Any]) -> 'Model': ...
        def write(self, vals: Dict[str, Any]) -> bool: ...
        def unlink(self) -> bool: ...
        def search(self, domain: List, **kwargs) -> 'Model': ...
        def browse(self, ids: Union[int, List[int]]) -> 'Model': ...
        
    class TransientModel(Model): ...

class fields:
    @staticmethod
    def Char(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Text(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Integer(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Float(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Boolean(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Date(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Datetime(string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Selection(selection: List, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Many2one(comodel_name: str, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def One2many(comodel_name: str, inverse_name: str, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Many2many(comodel_name: str, string: str = None, **kwargs) -> Any: ...
    @staticmethod
    def Binary(string: str = None, **kwargs) -> Any: ...

class api:
    @staticmethod
    def depends(*args) -> Any: ...
    @staticmethod
    def model(func) -> Any: ...
    @staticmethod
    def constrains(*args) -> Any: ...
    @staticmethod
    def onchange(*args) -> Any: ...

class exceptions:
    class ValidationError(Exception): ...
    class UserError(Exception): ...
    class AccessError(Exception): ...

class http:
    class Controller: ...
    @staticmethod
    def route(*args, **kwargs) -> Any: ...

# Mock pour les dépendances externes
class qrcode:
    class QRCode:
        def __init__(self, *args, **kwargs): ...
        def add_data(self, data: str): ...
        def make(self, fit: bool = True): ...
        def make_image(self, **kwargs) -> Any: ...

class dateutil:
    class relativedelta:
        def __init__(self, **kwargs): ...